% escher README
% August 13, 2013

Overview
--------

Escher is a collection of octave and python routines for the
visualization and plotting of molecules and crystals. The emphasis in
escher is, first, making the plots as pretty and artsy as possible
and, second, providing a very flexible framework to create plots that
are outside the capacities that traditional GUIs provide.

The original idea in escher was to modernize
[tessel](http://azufre.quimica.uniovi.es/software.html#tessel), a
program for the representation of crystal structures (and more). Via
an interface to [POV-Ray](http://www.povray.org/), tessel is able to
generate very high quality representations of periodic and finite
molecular structures, which is good, because we are not particularly
satisfied with the state of (free) visualization software at the
moment.

We now know, however, that tessel has some annoying drawbacks: i) for
most condensed matter applications it is difficult to set the camera
in the orientation that generates a clear plot, ii) it is
time-consuming to write an input for every single graphical
representation, and iii) when we have a problem that exceeds the
possibilities of the implemented keyword list, it is necessary to
reprogram part of the code.

So, because efficiency is almost never an issue with plots, we decided
to port tessel into a more flexible language: a scripting language
like octave. The first part of escher is a collection of octave
routines that read molecular or crystal information from a variety of
sources (gaussian, Quantum ESPRESSO, VASP), and generates
'representations' (balls, sticks, surfaces,...)  that are written to a
graphical output format. For best results, this output format is
POV-Ray, but it can be wavefront obj, geomview off, etc. The scene
contained in the representation is then rendered to generate the
plot. Consequently, in order to create a figure, one has to write a
script using the functions in the escher library.

The perceptive reader will probably have noticed that instead of
solving the drawbacks in tessel we have made two of them worse: you
now have to write a script instead of an input file and there is still
no way of setting the camera orientation. Although this kind of things
tends to happen to the authors when they get carried away, this time,
however, it is not as bad as it sounds. A few octave lines are usually
enough to generate a very reasonable plot with current default options
and we provide a hack of the [g3dviewer
program](http://automagically.de/g3dviewer/) that permits setting the
camera using an obj file.

A more permanent solution would be to create a graphical interface,
and this comprises the second part of escher: the python GUI. This
part is, however, still under heavy development and presently not
functional.

Experimental does not even begin to describe the current state of
escher so... beware ye who enter here!! We usually implement new
features as requests for plots come up in our everyday work (which is
computational chemistry, and in no way related to software development
itself), so escher naturally reflects these inclinations.
Contributions in any other direction, comments and suggestions are
greatly appreciated.

Download
--------

Because of the size of the examples directory, the escher distribution
is split in two parts. The source code itself can be downloaded from:

**Source code**:
[tar.bz2](http://gatsby.ucmerced.edu/downloads/escher/escher.tar.bz2), 
[tar.gz](http://gatsby.ucmerced.edu/downloads/escher/escher.tar.gz),
[zip](http://gatsby.ucmerced.edu/downloads/escher/escher.zip)

The examples are:

**Examples**:
[tar.bz2](http://gatsby.ucmerced.edu/downloads/escher/escher_data.tar.bz2), 
[tar.gz](http://gatsby.ucmerced.edu/downloads/escher/escher_data.tar.gz),
[zip](http://gatsby.ucmerced.edu/downloads/escher/escher_data.zip)

We still don't have a clear idea of how we want to organize the
examples directory, so it will probably change in the future. In order
to set the orientation of the camera, our slightly-hacked version of
g3dviewer comes in useful:

**g3dviewer**: [tar.bz2](http://gatsby.ucmerced.edu/downloads/escher/g3dviewer.tar.bz2), 

**Recent changes**: [ChangeLog](http://gatsby.ucmerced.edu/downloads/escher/ChangeLog)

**Contact**:
Alberto Otero de la Roza [mailto:aoterodelaroza@ucmerced.edu aoterodelaroza@ucmerced.edu] 
Daniel Menéndez [mailto:danielmail7@gmail.com danielmail7@gmail.com] 
Víctor Luaña Cabal [mailto:victor@carbono.quimica.uniovi.es victor@carbono.quimica.uniovi.es] 

Installation
------------

In order to use escher, you will need
[octave](http://www.gnu.org/software/octave/), which these days comes
in the package distribution system of most linux distros. To install
escher, uncompress the package:   

    tar xjvf escher.tar.bz2

and then add the following line to your .octaverc:

    addpath("~/path/to/escher/src")

replacing the string with your particular path. Once this is done, you
can check that your installation is working by opening octave and
trying to call some of the functions in escher (e.g. molecule()).

To install our version of g3dviewer, you'll first have to resolve the
dependencies for it. In debian-based systems, this is done using apt:

    sudo apt-get build-dep g3dviewer

which will install all the required packages. Then, uncompress the
g3dviewer package:

    tar xjvf g3dviewer.tar.bz2

and compile it:

    ./configure --prefix=/opt/g3dviewer
    make
    sudo make install

where /opt/g3dviewer is to be replaced by a target directory of your
choice. The g3dviewer executable is in /opt/g3dviewer/bin.

Use
---

Escher is a collection of octave functions to manipulate crystal and
molecular geometries, so this software can be used in two ways: i)
writing an octave script, or ii) using the functions directly in an
octave interactive session.

There are three basic objects in escher: crystals, molecules, and
representations. By 'object' we mean an octave cell array that
contains a collection of data for one of the types above. For
instance, the crystal object contains the cell parameters, the atomic
positions, atomic types, and much more. 

A crystal represents a periodic solid and can be generated by reading,
for instance, the output from a solid-state electronic-structure
code. A molecule represent a gas-phase molecular structure: it
contains atomic coordinates, atomic types, etc. It can be read, say,
from an xyz file. A molecule can also be generated from a crystal
object by taking a piece from it, which is the usual procedure in the
creation of plot for a crystal. A representation is a scene that is
meant to be plotted. Instead of atoms and bonds, there are balls,
sticks, cameras and lights. The representation can be obtained from a
crystal or a molecule object, and it is usually written to a graphical
file format, such as a POV-Ray file (pov) or an obj.

A simple example of usage is:

    #! /usr/bin/octave -q

    cr = cr_read_espresso("crystal.scf.out");
    mol = cr_crystalbox(cr);
    rep = mol_ball(mol);
    rep = mol_stick(mol,rep);
    rep = rep_setdefaultscene(rep);
    rep_write_pov(rep,"crystal.pov");

A crystal object is created by reading the output of a Quantum
ESPRESSO calculation (crystal.scf.out). Then, a molecule is generated
by taking a unit cell (with a little border) from the crystal. A
representation is obtained from the molecule by representing the atoms
as spheres (mol_ball), the bonds as sticks (mol_stick) and by setting
the default parameters for the camera and lights
(rep_setdefaultscene). The scene is written to a POV-Ray file
(crystal.pov) using rep_write_pov. This file can be rendered doing:

    povray -D -UV +Icrystal.pov +Ocrystal.png +W1000 +H1000 +A

Our version of g3dviewer can be used to orient the camera via the
rep_setdefaultscene() function. To do that, write an obj file:

    rep_write_obj(rep,"crystal.obj");

Then open it with g3dviewer:

    g3dviewer crystal.obj

Our little tweak to the program makes g3dviewer write a matrix to the
output:

    r = [
       0.9752922654  0.1395401061 0.1712704897 0.0000000000
      -0.2208531201  0.6347193718 0.7405099869 0.0000000000
      -0.0053778365 -0.7600393295 0.6498547792 0.0000000000
       0.0000000000  0.0000000000 0.0000000000 1.0000000000
    ];

that can be subsequently used like this:

    rep = rep_setdefaultscene(rep,r);

to reproduce the same orientation of the camera in g3dviewer with
POV-Ray. The (1:3,1:3) is the rotation matrix, (4,1:3) is the
translation from the center of projection. Usually, it is useful to
modify the r provided by g3dviewer to make the (4,1:3) block something
like [0 0 -20], where -20 is a measure of the distance to the point
the camera is pointing at. The (1:3,4) block is the actual position of
the center of projection. If set to [0; 0; 0], which we strongly
recommend, then it is taken as the center of mass of the system.

Image gallery
-------------

You can find several examples of escher plots in the examples
directory (escher_data) and also in the [[Image gallery|Image Gallery]] and in the
[[Anthology_of_interest|Anthology of Interest]].

Copyright notice
----------------

Copyright (c) 2013 Alberto Otero de la Roza, Daniel Menéndez, and
Víctor Luaña Cabal.

escher is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

