% Copyright (C) 2013 Victor Lua~na and Alberto Otero-de-la-Roza
%
% This octave routine is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or (at
% your option) any later version. See <http://www.gnu.org/licenses/>.
%
% The routine distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
% more details.

function [mol,cpu] = mol_cr2topo (root, qal=6, mrg=2, rho=1, mep=1, cube=0, ctype="scf", LOG=1)
% function [mol,cpu] = mol_cr2topo (root, qal=4, mrg=2, rho=1, mep=1, cube=0, ctype="scf", LOG=1)
%
% mol_cr2topo - runs cubegen and critic2g to determine the topology of the
% electron density and MEP.
%
% The predetermined sequence of calculations is:
% 1. Read the fchk file and determine the range for cubegen
% 2. Get the grid description of rho and MEP using cubegen
% 3. Run critic2g to analyze the topologies of both fields
%
% Required input variables:
% {root}: root for the next filenames.
%    <root>.fchk -----> fchk file used by cubegen and this routine.
%    <root>-rho.cube -> cube files for rho and mep.
%    <root>-mep.cube
%    <root>-cr2.sh ---> sh script to run the calculations
%
% Files generated by the run of cubegen and critic2g:
%    <root>-rho.cr2out ---> critic2g output for rho.
%    <root>-mep.cr2out ---> critic2g output for mep.
%    <root>_rho.xyz ------------> rho critic points.
%    <root>_mep.xyz ------------> mep critic points.
%
% Optional input variables (all have default values):
% {qal}: quality level of the rho/mep grids.
% {mrg}: empty margin surrounding the finite molecule.
% {rho}: topology of rho?
% {mep}: topology of mep?
% {cube}: toggle deciding a cube or parallepipedic grid.
% {cytpe}: type of gaussian calculation. Options: SCF, MP2, CI, QCI.
% {LOG = 1}: print information about the data read in if LOG>0.
%            LOG = 0  no output.
%            LOG = 1  debug information.
%
% Required output variables:
% {x0}: origin for the grid.
% {nx}: number of points in the grid.
% {dx}: grid resolution.
%
% Authors: VLC Victor Lua~na .......... <victor@carbono.quimica.uniovi.es>
%          AOR Alberto Otero-de-la-Roza <alberto@carbono.quimica.uniovi.es>
% Created: Jan 2013

   bohrtoans = 0.52917720859;

   tic;
   mol = mol_read_fchk(root,0);
   mol.atxyz = mol.atxyz * bohrtoans;
   [x0,nx,dx] = mol_cuberange(mol, qal, mrg, cube, 0);

   fsh = sprintf("%s-cr2.sh", root);
   [fid,msg] = fopen(fsh, "w+");
   if (fid < 0 || ferror(fid))
      disp(msg)
      error("mol_cr2topo: could not open -- %s", fsh);
   endif

   if (rho > 0)
      fprintf(fid, "cat << EOF | ");
      fprintf(fid, "cubegen 0 density=%s %s.fchk %s-rho.cube -1 h\n", \
              ctype, root, root);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", -6, x0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(1), dx(1), 0.0, 0.0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(2), 0.0, dx(2), 0.0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(3), 0.0, 0.0, dx(3));
      fprintf(fid, "EOF\n\n");
      fprintf(fid, "critic2g << EOF > %s-rho.cr2out\n", root);
      fprintf(fid, "nohmove\n");
      fprintf(fid, "crystal\n");
      fprintf(fid, "   spg P 1\n");
      fprintf(fid, "   struct %s-rho.cube cube\n", root);
      fprintf(fid, "   den %s-rho.cube cube\n", root);
      fprintf(fid, "   nocore\n", root);
      fprintf(fid, "endcrystal\n");
      fprintf(fid, "auto\n");
      fprintf(fid, "EOF\n");
      fprintf(fid, "mv stdin_cps.xyz %s_rho.xyz\n\n",root);
   endif

   if (mep > 0)
      fprintf(fid, "cat << EOF | ");
      fprintf(fid, "cubegen 0 potential=%s %s.fchk %s-mep.cube -1 h\n", \
              ctype, root, root);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", -6, x0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(1), dx(1), 0.0, 0.0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(2), 0.0, dx(2), 0.0);
      fprintf(fid, "%5d %12.6f %12.6f %12.6f\n", nx(3), 0.0, 0.0, dx(3));
      fprintf(fid, "EOF\n\n");
      fprintf(fid, "critic2g << EOF > %s-mep.cr2out\n", root);
      fprintf(fid, "crystal\n");
      fprintf(fid, "   spg P 1\n");
      fprintf(fid, "   struct %s-mep.cube cube\n", root);
      fprintf(fid, "   den %s-mep.cube cube\n", root);
      fprintf(fid, "   nocore\n", root);
      fprintf(fid, "endcrystal\n");
      fprintf(fid, "auto\n");
      fprintf(fid, "EOF\n");
      fprintf(fid, "mv stdin_cps.xyz %s_mep.xyz\n\n",root);
   endif

   fclose(fid);

   if (rho > 0 || mep > 0)
      system(sprintf("sh %s", fsh));
   endif

   cpu = toc;

   if (LOG > 0)
      printf("Grid:\n");
      printf("%5d %12.6f %12.6f %12.6f\n", -6, x0);
      printf("%5d %12.6f %12.6f %12.6f\n", nx(1), dx(1), 0.0, 0.0);
      printf("%5d %12.6f %12.6f %12.6f\n", nx(2), 0.0, dx(2), 0.0);
      printf("%5d %12.6f %12.6f %12.6f\n", nx(3), 0.0, 0.0, dx(3));
      if (rho > 0)
         printf("Check topo(rho) in %s-rho.cr2out  [%s]\n", root, ctype); 
      endif
      if (mep > 0)
         printf("Check topo(rho) in %s-mep.cr2out  [%s]\n", root, ctype); 
      endif
      printf("CPU time: %.4f\n", cpu);
   endif

endfunction
